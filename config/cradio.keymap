// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Home row mods macro
// #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviours {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <13 14 15 16>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <20 21 22 23>;
            hold-trigger-on-release;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp B                 &kp L             &kp D                 &kp W                        &kp V        &kp J        &kp F                &kp O                  &kp U              &kp SQT
&hm_r LEFT_CONTROL N  &hm_l LEFT_ALT R  &hm_l LEFT_COMMAND T  &hm_l LEFT_SHIFT S           &kp G        &kp Y        &hm_r RIGHT_SHIFT H  &hm_r RIGHT_COMMAND A  &hm_r RIGHT_ALT E  &hm_r RIGHT_CONTROL I
&kp X                 &kp Q             &kp M                 &kp C                        &kp Z        &kp K        &kp P                &kp DOT                &kp SEMI           &kp COMMA
                                                              &hm_l LG(LS(LC(LALT))) BSPC  &lt 1 TAB    &lt 3 ENTER  &lt 2 SPACE
            >;
        };

        nav_num {
            bindings = <
&kp INS     &kp N1  &kp N2  &kp N3  &trans    &kp HOME  &kp PG_DN   &kp PG_UP  &kp END    &kp COLON
&kp DEL     &kp N4  &kp N5  &kp N6  &trans    &kp LEFT  &kp DOWN    &kp UP     &kp RIGHT  &kp SEMI
&caps_word  &kp N7  &kp N8  &kp N9  &kp N0    &trans    &trans      &trans     &trans     &trans
                            &trans  &trans    &trans    &kp ESCAPE
            >;
        };

        sym {
            bindings = <
&trans    &kp LBKT       &kp LBRC  &kp RBRC          &trans       &kp CARET  &kp LPAR    &kp RPAR   &kp RBKT  &kp TILDE
&kp EXCL  &kp AT         &kp HASH  &kp DLLR          &kp PRCNT    &kp ASTRK  &kp MINUS   &kp EQUAL  &kp BSLH  &kp GRAVE
&trans    &kp LESS_THAN  &trans    &kp GREATER_THAN  &trans       &kp AMPS   &kp UNDER   &kp PLUS   &kp PIPE  &kp SLASH
                                   &trans            &trans       &trans     &kp ESCAPE
            >;
        };

        media_and_bt {
            bindings = <
&sys_reset   &kp C_PREV    &kp C_NEXT        &kp C_BRIGHTNESS_INC  &bt BT_SEL 0    &trans  &trans         &trans     &trans         &sys_reset
&bootloader  &kp C_VOL_DN  &kp C_VOLUME_UP   &kp C_BRIGHTNESS_DEC  &bt BT_SEL 1    &trans  &kp LG(V)      &kp LG(C)  &kp LG(X)      &bootloader
&trans       &kp C_MUTE    &kp C_PLAY_PAUSE  &trans                &bt BT_CLR      &trans  &kp LG(LS(V))  &kp LG(Z)  &kp LG(LS(Z))  &trans
                                             &kp ESCAPE            &trans          &trans  &trans
            >;
        };
    };
};
